class RandomizedSet {
private:
    vector<int> v;
    unordered_map<int, int> m;
    
public:
    RandomizedSet() {

    }
    
    bool insert(int val) {
        if (m.count(val))
            return false;
        
        v.push_back(val);
        m[val] = v.size() - 1; // store index # for val in unordered_map
        return true;
        
    }
    
    bool remove(int val) {
        if (!m.count(val))
            return false;
        
        // move matching value to the very end, and remove it with pop_back
        int last = v.back();
        m[last] = m[val];
        v[m[val]] = last;
        v.pop_back();
        m.erase(val);;
        return true;
        
    }
    
    int getRandom() {
        return v[rand() % v.size()];
    }
};

/**
* Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */ 

/*
    Runtime: 311 ms, faster than 49.02% of C++ online submissions for Insert Delete GetRandom O(1).
    Memory Usage: 97.1 MB, less than 21.47% of C++ online submissions for Insert Delete GetRandom O(1).
*/
