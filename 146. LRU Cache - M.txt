# Runtime: 1075 ms, faster than 37.11% of Python3 online submissions for LRU Cache.
# Memory Usage: 76.4 MB, less than 33.36% of Python3 online submissions for LRU Cache.
# used python's library orderedDict's move_to_end


class LRUCache:

    d = None
    cap = 0
    i = 0
    
    def __init__(self, capacity: int):
        self.d = OrderedDict()
        self.cap = capacity

    def get(self, key: int) -> int:
        try:
            v = self.d[key]
            self.d.move_to_end(key)
            return v
        except KeyError:
            return -1
        

    def put(self, key: int, value: int) -> None:
        
        # if it exists no need to delete
        try:
            self.d[key]
            self.d[key] = value
            self.d.move_to_end(key)
        
        except KeyError:
        
            if self.i == self.cap:
                for item in self.d:
                    del self.d[item]
                    self.i-=1
                    break

            self.d[key] = value
            self.i+=1
            

